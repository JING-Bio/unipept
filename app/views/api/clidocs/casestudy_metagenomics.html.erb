<div class="apidocs casestudies row">
  <div class="col-xs-9">
    <h1 class="api-title">Case Study: Unipept Metagenomics Analysis Pipeline</h1>
    <p class="lead">This case study show how to use UMGAP for the taxonomic analysis of a metagenomics dataset.</p>
    <div class="card">
      <div class="card-title card-title-colored"><h2 class="card-title-text">Introduction</h2></div>
      <div class="card-supporting-text">
        <p>
          The Unipept Metagenomics Analysis Pipeline (UMGAP) is a tool for mapping (short) metagenomics reads to taxa,
          rivalling state of the art alternatives such as Kraken (2014)
          with the additional benefit of species level identification.
          UMGAP achieves this by transforming the mapping task into a metaproteomics problem
          by using various alternative gene predictors on the metagenomics reads
          and processing the resulting data with the existing Unipept Metaproteomics Analysis Pipeline.
          Each step in UMGAP is highly configurable.
        </p>
      </div>
    </div>

    <div class="card">
      <div class="card-title card-title-colored"><h2 class="card-title-text">Preprocessing</h2></div>
      <div class="card-supporting-text">
        <p>
          Throughout this overview of UMGAP, all steps will have examples to demonstrate the exact usage.
          For this, we have sampled 100 paired-end DNA reads from a dataset
          generated by Lindgreen <i>et al.</i> (2016) for their metabenchmark.
          As this dataset contains paired-end reads in FASTQ format, and UMGAP operates on FASTA data,
          we perform a first preprocessing step to convert the FASTQ into FASTA files.
        </p>
        <pre>
<!--   --><b>$</b> umgap fastq2fasta A1.fq A2.fq | sed '/^>/s_/[12]$__' > preprocessed.fa
        </pre>
        <p>
          This command will interleave the given FASTQ files and output a FASTA stream,
          in which the paired-ends alternate each other.
          We use a `sed` substitution to remove the "/1" or "/2" indicating the end,
          as we will pool the ends later on anyway.
        </p>
      </div>
    </div>

    <div class="card">
      <div class="card-title card-title-colored"><h2 class="card-title-text">Gene prediction</h2></div>
      <div class="card-supporting-text">
        <p>
          To convert the metagenomics reads into a metaproteomics problem,
          we have to perform some kind of gene prediction.
          While any gene prediction tool can be used, UMGAP was tested with FragGeneScan (2010) and FragGeneScan++,
          our in-house improved version of FragGeneScanPlus (2015), a predictor using on Hiddem Markov Models.
          On the other hand you can choose not to bother with prediction
          and just translate all six reading frames completely with a builtin tool.
        </p>
        <p>
          This step in the pipeline limits our tool to the coding regions of the given DNA reads.
          This caps the sensitivity of our predictions,
          as we can offer no prediction for a read from a non-coding region.
          On the other hand, coding regions are less prone to mutation
          and the mutations that do occur often do not change the resulting amino acid.
        </p>
        <p>
          For more options on the FragGeneScan and FragGeneScan++ commands,
          read their respective documentation.
          Here, it suffices to say that the commands below will write the predicted genes
          in FASTA format to a file called `predicted-genes.faa`.
        </p>
        <pre>
<!--   --><b>$</b> FGS -s preprocessed.fa -o predicted-genes -w0 -t illumina_10 -p 16 > /dev/null
<!--   --><b>$</b> rm predicted-genes.fnn predicted-genes.out # we don't use these files
        </pre>
        <pre>
<!--   --><b>$</b> FGSpp -s stdin -o stdout -w 0 -r train -t illumina_10 -p 16 -m 3000 < preprocessed.fa > predicted-genes.faa
        </pre>
        <p>
          With our alternative six-frame translation option,
          we choose to translate all (<code>-a</code>) frames using the standard translation table.
        </p>
        <pre>
<!--   --><b>$</b> umgap translate -a < preprocessed.fa > predicted-genes.faa
        </pre>
      </div>
    </div>

    <div class="card">
      <div class="card-title card-title-colored"><h2 class="card-title-text">Taxonomic Identification</h2></div>
      <div class="card-supporting-text">
        <p>
          UMGAP uses exact substring matching to identify reads.
          The next step of the pipeline fragments each amino acid sequence into 9-mers,
          all of its substrings of length 9, and looks them up in our index.
          This index maps each 9-mer encountered in the UniProt's protein knowledgebase (2014)
          to the lowest common ancestor (LCA) of all the organisms it occured in.
          The LCA of a set of taxa is equal to the taxon of the most specific rank
          in the NCBI taxonomy (2011) that is either a descendant or an ancestor of all taxa in that set.
        </p>
        <pre>
<!--   --><b>$</b> umgap prot2kmer2lca -k9 9-mer.index < predicted-genes.faa > found-kmers.fa
        </pre>
        <p>
          This command will look up each 9-mer in the input data
          and output the associated taxon if any is found.
          With the <code>-o</code> or <code>--one-on-one</code> flag,
          the unrecognized 9-mers will be included as a "0" taxon,
          the use of which will be clarified in the next step.
        </p>
      </div>
    </div>

    <div class="card">
      <div class="card-title card-title-colored"><h2 class="card-title-text">(Optional) Filtering</h2></div>
      <div class="card-supporting-text">
        <p>
          Especially when running the pipeline with all six frames,
          a lot of the translations are invalid.
          The Seed-Extend step in the pipeline filters out most random hits
          by selecting only 9-mer hits which are spatially close to other hits.
        </p>
        <pre>
<!--   --><b>$</b> umgap seedextend -g2 -s4 taxons.tsv < found-kmers.fa | grep -v '^0$' > selected-seeds.fa
        </pre>
        <p>
          This algorithm requires spatial information which is provided
          by supplying the <code>-o</code> flag to the previous command.
          The <code>taxons.tsv</code> is a file describing the NCBI taxonomic tree.
          The <code>grep</code> command filters out remaining unknown identifications.
        </p>
      </div>
    </div>

    <div class="card">
      <div class="card-title card-title-colored"><h2 class="card-title-text">Aggregation</h2></div>
      <div class="card-supporting-text">
        <p>
          At this step of the pipeline, we have a list of taxon identifiers per protein read,
          one protein read per reading frame and two paired-ends per metagenomics read.
          To get a single taxon identification per read, we need to aggregate this list.
          UMGAP offers 3 alternative aggregation strategies with varying speciality.

          <ul>
            <li>
              Unipept's lowest common ancestor strategy (LCA*),
              where the consensus taxon is, as before, the taxon of most specific rank
              which is either descendant or ancestor of every given taxon;
            </li>
            <li>
              Kraken's maximum root-to-leaf path (MRTL),
              where the consensus taxon is the taxon in the given list
              which has the most ancestors in the given list;
            </li>
            <li>
              A newly developed hybrid strategy,
              which combines LCA* and MRTL based on a given scaling factor.
              The hybrid method aims to ignore some outliers without compromising generality.
            </li>
          </ul>
        </p>
        <p>
          Before this aggregation, we combine the results of each reading frame
          and paired-end with <code>uniq</code>.
        </p>
        <pre>
<!--   --><b>$</b> umgap uniq < found-kmers.fa | umgap taxa2agg -m tree -a hybrid -f 0.75 taxons.tsv > classification.fa
        </pre>
        <p>
          Finally, the whole sample is summarized using e.g. a frequency table,
          showing the number of reads mapping to each taxon,
          or one of the many visualizations Unipept offers.
        </p>
        <pre>
<!--   --><b>$</b> grep -v '^>' | umgap report -r species taxons.tsv
        </pre>
        <p>
          The <code>grep</code> command will drop the FASTA headers,
          allowing the <code>report</code> command to snap each taxon to either a species or "unknown"
          and report the frequency table of the results.
        </p>
      </div>
    </div>
    <h2>References</h2>
    <ul>
      <li>Dicksved, J., Halfvarson, J., Rosenquist, M., Järnerot, G., Tysk, C., Apajalahti, J., ... &amp; Jansson, J. K. (2008). Molecular analysis of the gut microbiota of identical twins with Crohn's disease. <em>The ISME journal</em>, 2(7), 716-727.</li>
      <li>Kolmeder, C. A., &amp; de Vos, W. M. (2014). Metaproteomics of our microbiome — developing insight in function and activity in man and model systems. <em>Journal of proteomics</em>, 97, 3-16.</li>
      <li>Seifert, J., Herbst, F. A., Halkjær Nielsen, P., Planes, F. J., Jehmlich, N., Ferrer, M., &amp; Bergen, M. (2013). Bioinformatic progress and applications in metaproteogenomics for bridging the gap between genomic sequences and metabolic functions in microbial communities. <em>Proteomics</em>, 13(18-19), 2786-2804.</li>
      <li>Verberkmoes, N. C., Russell, A. L., Shah, M., Godzik, A., Rosenquist, M., Halfvarson, J., ... &amp; Jansson, J. K. (2009). Shotgun metaproteomics of the human distal gut microbiota. <em>The ISME journal</em>, 3(2), 179-189.</li>

      <li>Wood, D. E., &amp; Salzberg, S. L. (2014). Kraken: ultrafast metagenomic sequence classification using exact alignments. <em>Genome biology</em>, 15(3), R46.</li>
      <li>Lindgreen, S., Adair, K. L., &amp; Gardner, P. P. (2016). An evaluation of the accuracy and speed of metagenome analysis tools. <em>Scientific reports</em>, 6, 19233.</li>
      <li>Rho, M., Tang, H., &amp; Ye, Y. (2010). FragGeneScan: predicting genes in short and error-prone reads. <em>Nucleic acids research</em>, 38(20), e191-e191.</li>
      <li>Kim, D., Hahn, A. S., Wu, S. J., Hanson, N. W., Konwar, K. M., & Hallam, S. J. (2015, August). FragGeneScan-Plus for scalable high-throughput short-read open reading frame prediction. <em>Computational Intelligence in Bioinformatics and Computational Biology (CIBCB)</em>, 2015 IEEE Conference on (pp. 1-8), IEEE.</li>
      <li>UniProt Consortium. (2014). UniProt: a hub for protein information. <em>Nucleic acids research</em>, 43(D1), D204-D212.</li>
      <li>Federhen, S. (2011). The NCBI taxonomy database. <em>Nucleic acids research</em>, 40(D1), D136-D143.</li>
    </ul>
  </div>
</div>
